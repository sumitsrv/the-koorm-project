<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    kotlin(&quot;multiplatform&quot;) version &quot;1.9.10&quot;&#10;    kotlin(&quot;plugin.serialization&quot;) version &quot;1.9.10&quot;&#10;    id(&quot;org.jetbrains.compose&quot;) version &quot;1.5.10&quot;&#10;    id(&quot;com.android.library&quot;) version &quot;8.1.4&quot;&#10;    id(&quot;maven-publish&quot;)&#10;}&#10;&#10;group = &quot;org.koorm&quot;&#10;version = &quot;1.0-SNAPSHOT&quot;&#10;&#10;repositories {&#10;    google()&#10;    mavenCentral()&#10;    maven(&quot;https://maven.pkg.jetbrains.space/public/p/compose/dev&quot;)&#10;    gradlePluginPortal()&#10;}&#10;&#10;kotlin {&#10;    // JVM Desktop&#10;    jvm(&quot;desktop&quot;) {&#10;        jvmToolchain(17)&#10;    }&#10;&#10;    // JavaScript/Browser&#10;    js(IR) {&#10;        browser {&#10;            commonWebpackConfig {&#10;                cssSupport {&#10;                    enabled.set(true)&#10;                }&#10;            }&#10;        }&#10;        binaries.executable()&#10;    }&#10;&#10;    // Android targets&#10;    androidTarget {&#10;        compilations.all {&#10;            kotlinOptions {&#10;                jvmTarget = &quot;1.8&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    // iOS targets (can be built on macOS with Xcode)&#10;    iosX64()&#10;    iosArm64()&#10;    iosSimulatorArm64()&#10;&#10;    sourceSets {&#10;        // Common source set for all platforms&#10;        val commonMain by getting {&#10;            dependencies {&#10;                implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)&#10;                implementation(&quot;org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0&quot;)&#10;                implementation(&quot;org.jetbrains.kotlinx:kotlinx-datetime:0.4.1&quot;)&#10;&#10;                // Compose Multiplatform&#10;                implementation(compose.runtime)&#10;                implementation(compose.foundation)&#10;                implementation(compose.material3)&#10;                implementation(compose.ui)&#10;            }&#10;        }&#10;&#10;        val commonTest by getting {&#10;            dependencies {&#10;                implementation(kotlin(&quot;test&quot;))&#10;                implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3&quot;)&#10;            }&#10;        }&#10;&#10;        // iOS&#10;        val iosX64Main by getting&#10;        val iosArm64Main by getting&#10;        val iosSimulatorArm64Main by getting&#10;        val iosMain by creating {&#10;            dependsOn(commonMain)&#10;            iosX64Main.dependsOn(this)&#10;            iosArm64Main.dependsOn(this)&#10;            iosSimulatorArm64Main.dependsOn(this)&#10;        }&#10;&#10;        // JVM Desktop&#10;        val desktopMain by getting {&#10;            dependencies {&#10;                implementation(compose.desktop.currentOs)&#10;            }&#10;        }&#10;&#10;        // JavaScript/Browser&#10;        val jsMain by getting {&#10;            dependencies {&#10;                implementation(compose.ui)&#10;                implementation(compose.foundation)&#10;                implementation(compose.material3)&#10;                implementation(compose.runtime)&#10;            }&#10;        }&#10;&#10;        // Android&#10;        val androidMain by getting&#10;    }&#10;}&#10;&#10;compose.desktop {&#10;    application {&#10;        mainClass = &quot;org.koorm.ocpd.DesktopMainKt&quot;&#10;&#10;        nativeDistributions {&#10;            targetFormats(&#10;                org.jetbrains.compose.desktop.application.dsl.TargetFormat.Dmg,&#10;                org.jetbrains.compose.desktop.application.dsl.TargetFormat.Msi,&#10;                org.jetbrains.compose.desktop.application.dsl.TargetFormat.Deb&#10;            )&#10;            packageName = &quot;OCPD Assistant&quot;&#10;            packageVersion = &quot;1.0.0&quot;&#10;            description = &quot;Your Compassionate Productivity Companion&quot;&#10;            copyright = &quot;Â© 2025 OCPD Assistant&quot;&#10;            vendor = &quot;Koorm&quot;&#10;        }&#10;    }&#10;}&#10;&#10;android {&#10;    namespace = &quot;org.koorm.ocpd&quot;&#10;    compileSdk = 34&#10;&#10;    defaultConfig {&#10;        minSdk = 24&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_1_8&#10;        targetCompatibility = JavaVersion.VERSION_1_8&#10;    }&#10;}&#10;&#10;publishing {&#10;    publications {&#10;        withType&lt;org.gradle.api.publish.maven.MavenPublication&gt;().configureEach {&#10;            pom {&#10;                licenses {&#10;                    license {&#10;                        name.set(&quot;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International&quot;)&#10;                        url.set(&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot;)&#10;                        distribution.set(&quot;repo&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import java.io.File&#10;import java.util.Properties&#10;import com.android.build.gradle.LibraryExtension&#10;import org.gradle.api.JavaVersion&#10;&#10;plugins {&#10;    kotlin(&quot;multiplatform&quot;) version &quot;1.9.10&quot;&#10;    kotlin(&quot;plugin.serialization&quot;) version &quot;1.9.10&quot;&#10;    id(&quot;org.jetbrains.compose&quot;) version &quot;1.5.10&quot;&#10;    // Apply Android plugin only when SDK is available&#10;    id(&quot;com.android.library&quot;) version &quot;8.1.4&quot; apply false&#10;    id(&quot;maven-publish&quot;)&#10;}&#10;&#10;group = &quot;org.koorm&quot;&#10;version = &quot;1.0-SNAPSHOT&quot;&#10;&#10;repositories {&#10;    google()&#10;    mavenCentral()&#10;    maven(&quot;https://maven.pkg.jetbrains.space/public/p/compose/dev&quot;)&#10;    gradlePluginPortal()&#10;}&#10;&#10;// Detect whether an Android SDK is available; if not, skip applying the Android plugin/targets&#10;val enableAndroid: Boolean by lazy {&#10;    val envSdk = System.getenv(&quot;ANDROID_SDK_ROOT&quot;) ?: System.getenv(&quot;ANDROID_HOME&quot;)&#10;    if (envSdk != null &amp;&amp; File(envSdk).exists()) return@lazy true&#10;&#10;    val lp = rootProject.file(&quot;local.properties&quot;)&#10;    if (lp.exists()) {&#10;        val props = Properties().apply { lp.inputStream().use { load(it) } }&#10;        val sdkDir = props.getProperty(&quot;sdk.dir&quot;)&#10;        if (sdkDir != null &amp;&amp; File(sdkDir).exists()) return@lazy true&#10;    }&#10;    false&#10;}&#10;&#10;if (enableAndroid) {&#10;    apply(plugin = &quot;com.android.library&quot;)&#10;} else {&#10;    logger.lifecycle(&quot;Android SDK not found; skipping Android plugin and target configuration.&quot;)&#10;}&#10;&#10;kotlin {&#10;    // JVM Desktop&#10;    jvm(&quot;desktop&quot;) {&#10;        jvmToolchain(17)&#10;    }&#10;&#10;    // JavaScript/Browser&#10;    js(IR) {&#10;        browser {&#10;            commonWebpackConfig {&#10;                cssSupport {&#10;                    enabled.set(true)&#10;                }&#10;            }&#10;        }&#10;        binaries.executable()&#10;    }&#10;&#10;    // Android targets (only if SDK is present)&#10;    if (enableAndroid) {&#10;        androidTarget {&#10;            compilations.all {&#10;                kotlinOptions {&#10;                    jvmTarget = &quot;1.8&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // iOS targets (can be built on macOS with Xcode)&#10;    iosX64()&#10;    iosArm64()&#10;    iosSimulatorArm64()&#10;&#10;    sourceSets {&#10;        // Common source set for all platforms&#10;        val commonMain by getting {&#10;            dependencies {&#10;                implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)&#10;                implementation(&quot;org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0&quot;)&#10;                implementation(&quot;org.jetbrains.kotlinx:kotlinx-datetime:0.4.1&quot;)&#10;&#10;                // Compose Multiplatform&#10;                implementation(compose.runtime)&#10;                implementation(compose.foundation)&#10;                implementation(compose.material3)&#10;                implementation(compose.ui)&#10;            }&#10;        }&#10;&#10;        val commonTest by getting {&#10;            dependencies {&#10;                implementation(kotlin(&quot;test&quot;))&#10;                implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3&quot;)&#10;            }&#10;        }&#10;&#10;        // iOS&#10;        val iosX64Main by getting&#10;        val iosArm64Main by getting&#10;        val iosSimulatorArm64Main by getting&#10;        val iosMain by creating {&#10;            dependsOn(commonMain)&#10;            iosX64Main.dependsOn(this)&#10;            iosArm64Main.dependsOn(this)&#10;            iosSimulatorArm64Main.dependsOn(this)&#10;        }&#10;&#10;        // JVM Desktop&#10;        val desktopMain by getting {&#10;            dependencies {&#10;                implementation(compose.desktop.currentOs)&#10;            }&#10;        }&#10;&#10;        // JavaScript/Browser&#10;        val jsMain by getting {&#10;            dependencies {&#10;                implementation(compose.ui)&#10;                implementation(compose.foundation)&#10;                implementation(compose.material3)&#10;                implementation(compose.runtime)&#10;            }&#10;        }&#10;&#10;        // Android (only if SDK is present)&#10;        if (enableAndroid) {&#10;            val androidMain by getting&#10;        }&#10;    }&#10;}&#10;&#10;compose.desktop {&#10;    application {&#10;        mainClass = &quot;org.koorm.ocpd.DesktopMainKt&quot;&#10;&#10;        nativeDistributions {&#10;            targetFormats(&#10;                org.jetbrains.compose.desktop.application.dsl.TargetFormat.Dmg,&#10;                org.jetbrains.compose.desktop.application.dsl.TargetFormat.Msi,&#10;                org.jetbrains.compose.desktop.application.dsl.TargetFormat.Deb&#10;            )&#10;            packageName = &quot;OCPD Assistant&quot;&#10;            packageVersion = &quot;1.0.0&quot;&#10;            description = &quot;Your Compassionate Productivity Companion&quot;&#10;            copyright = &quot;Â© 2025 OCPD Assistant&quot;&#10;            vendor = &quot;Koorm&quot;&#10;        }&#10;    }&#10;}&#10;&#10;// Configure Android only when SDK is present&#10;if (enableAndroid) {&#10;    extensions.configure&lt;LibraryExtension&gt;(&quot;android&quot;) {&#10;        namespace = &quot;org.koorm.ocpd&quot;&#10;        compileSdk = 34&#10;&#10;        defaultConfig {&#10;            minSdk = 24&#10;        }&#10;&#10;        compileOptions {&#10;            sourceCompatibility = JavaVersion.VERSION_1_8&#10;            targetCompatibility = JavaVersion.VERSION_1_8&#10;        }&#10;    }&#10;}&#10;&#10;publishing {&#10;    publications {&#10;        withType&lt;org.gradle.api.publish.maven.MavenPublication&gt;().configureEach {&#10;            pom {&#10;                licenses {&#10;                    license {&#10;                        name.set(&quot;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International&quot;)&#10;                        url.set(&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot;)&#10;                        distribution.set(&quot;repo&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>